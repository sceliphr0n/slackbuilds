#!/bin/sh

# Copyright 2012-2017 Edward W. Koenig, Vancouver, WA, USA
# Updates copyright 2020 Lenard Spencer, Orlando, FL, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# nvidia-switch utility 4.0.1
#
# A tool to install and cleanly remove the nvidia driver without
# stomping on the xorg files.  Note: this tool "should" allow switching
# on the fly, but why? Pick a driver! You will still need to edit a bunch
#of other config files.

# TO-DO: needs more cleanup, simplify linking using system tools


# When ROOT=<PATH> is specified when using {install,upgrade,remove}pkg,
# PATH is usually specified without a trailing "/", so we add one here
if [ "$ROOT" = "" ]; then
  ROOT="${ROOT:-"/"}"
else 
  ROOT="${ROOT}/"
fi
CWD=$(pwd)
COMPAT32="LIB32FLAG" # This will be replaced in the build script (yes | no)
LIBSUFFIX="LIBDIRSUFFIX" # This will be replaced in the build script
INC="${ROOT}usr/include/GL"
LIB="${ROOT}usr/lib${LIBSUFFIX}"
LIB32="${ROOT}usr/lib"
XMOD="${LIB}/xorg/modules"
XLIB="$XMOD/extensions"
NV_VERSION="PKGVERSION" # This will be replaced in the build script
GL_VERSION="GLVERSION"
GLVND="GLVNDFLAG" # This will be replaced in the build script (yes | no)
SAVELIBS="${ROOT}var/log/nvidia"

save_GL(){
# backup original mesa and xorg conflicts to /var/log/nvidia
  cd $2
  # Need to make sure save path is reset incase of multilib
  SAVELIBS="${ROOT}var/log/nvidia"
  if [ "$2" = "$LIB32" ]; then
     SAVELIBS="${SAVELIBS}/32"
  elif [ "$2" = "$LIB" ]; then
     SAVELIBS="${SAVELIBS}/64"
  fi

  case "$1" in
    "nvidia")

      if [ "$GLVND" = "yes" ]; then
        mv libGL.so.$GL_VERSION $SAVELIBS
        mv libEGL.so.1.?.0 $SAVELIBS
        mv libGLESv1_CM.so.1.1.0 $SAVELIBS
        mv libGLESv2.so.2.0.0 $SAVELIBS
        mv libGL.la-nvidia libGL.la
        ln -sf libGL.so.1.7.0-nvidia libGL.so.1
        ln -sf libGL.so.1 libGL.so
        ln -sf libEGL.so.1.1.0-nvidia libEGL.so.1.1.0
        ln -sf libEGL.so.1 libEGL.so
        ln -sf libGLESv1_CM.so.1.2.0-nvidia libGLESv1_CM.libGLESv1_CM.so.1
        ln -sf libGLESv1_CM.so.1 libGLESv1_CM.so
        ln -sf libGLESv2.so.2.1.0-nvidia libGLESv2.so.2
        ln -sf libGLESv2.so.2 libGLESv2.so
      fi
    ;;

    "xorg")
       if [ -e libGL.la ]; then
          mv libGL.la libGL.la-nvidia
       fi
       if [ "$GLVND" = "yes" ]; then
          mv $SAVELIBS/* .
          ln -sf libGL.so.$GL_VERSION libGL.so.1
          ln -sf libGL.so.1 libGL.so
          ln -sf libEGL.so.1.0.0 libEGL.so.1
          ln -sf libEGL.so.1 libEGL.so
          ln -sf libGLESv1_CM.so.1.1.0 libGLESv1_CM.so.1
          ln -sf libGLESv1_CM.so.1.1.0 libGLESv1_CM.so
          ln -sf libGLESv2.so.2.0.0 libGLESv2.so.2
          ln -sf libGLESv2.so.2.0.0 libGLESv2.so
       fi
  ;;

  *)
        echo "nothing to do for save_gl?"
        exit 1
  ;;
  esac
  cd "$CWD"
}

save_glx(){
  cd "$XLIB"
  case "$1" in
      "nvidia")
        if [ -e libglx.so ]; then
          cp -a libglx.so libglx.so-xorg
        fi
	  ln -sf libglx.so.$NV_VERSION libglx.so
      ;;
      "xorg")
        if [ -e libglx.so-xorg ]; then
          rm -f libglx.so
          mv libglx.so-xorg libglx.so
        else
          if [ ! -e libglx.so ]; then
            echo -e "WARNING: libglx.so not found! Please reinstall xorg-server!\n"
          else
            if [ -L libglx.so ]; then
              rm libglx.so
              echo -e "WARNING: removed dead symlink libglx.so!  Please reinstall xorg-server!\n"
            fi
          fi
         fi
      ;;
        *)
          echo "nothing to do for save_glx?"
          exit 1
      ;;
  esac
  cd "$CWD"
}

save_wfb(){
  cd "$XMOD"
   if [ "$1" = "nvidia" ]; then
	ln -sf libnvidia-wfb.so.$NV_VERSION libnvidia-wfb.so.1
    fi
    if [ "$1" = "xorg" ]; then
	rm -f libnvidia-wfb.so.1
    fi
  cd "$CWD"
}

nvidia_install(){
  if [ ! -d $SAVELIBS ]; then
     echo "Creating missing $SAVELIB ..."
     mkdir -p $SAVELIBS
  fi
  echo $'Installing to nvidia-legacy390-driver files:\n'
  echo "Make sure the nvidia driver is ENABLED in /etc/X11/xorg.conf"
  echo "and in /etc/X11/xorg.conf.d.  Otherwise, this may lead to"
  echo -e "improperly working drivers.\n"

  save_glx "nvidia"
  save_GL "nvidia" $LIB
  save_wfb "nvidia"
# Check for multilib configuration
  if [ "$COMPAT32" = "yes" ]; then
    save_GL "nvidia" $LIB32
  fi
}

nvidia_remove(){
  echo $'Returning to stock xorg files:\n'
  echo "Make sure the nvidia driver is DISABLED in /usr/share/X11/xorg.conf.d"
  echo "/etc/X11/xorg.conf and in /etc/X11/xorg.conf.d."
  echo -e "Otherwise, this may lead to improperly working drivers.\n"
  if [ "$GLVND" = "yes" ]; then
    echo -e "Be sure to run /sbin/ldconfig after removing nvidia-legacy390-driver.\n"
  fi
  save_glx "xorg"
  save_GL "xorg" $LIB
  save_wfb "xorg"

# Check for multilib configuration
  if [ "$COMPAT32" = "yes" ]; then
    save_GL "xorg" $LIB32
  fi
}

if [ "$LIBSUFFIX" = "64" ]; then
  ARCH="x86_64"
else
  ARCH="x86"
fi

case "$1" in
  "--install")
    nvidia_install
    ;;
  "--remove")
    nvidia_remove
    ;;
  "--help")
    usage
    ;;
  *)
    usage
    ;;
esac
